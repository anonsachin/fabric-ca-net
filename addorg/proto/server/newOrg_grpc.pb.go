// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NewOrgClient is the client API for NewOrg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewOrgClient interface {
	CreateMSP(ctx context.Context, in *Msp, opts ...grpc.CallOption) (*Void, error)
}

type newOrgClient struct {
	cc grpc.ClientConnInterface
}

func NewNewOrgClient(cc grpc.ClientConnInterface) NewOrgClient {
	return &newOrgClient{cc}
}

func (c *newOrgClient) CreateMSP(ctx context.Context, in *Msp, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/server.NewOrg/CreateMSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewOrgServer is the server API for NewOrg service.
// All implementations must embed UnimplementedNewOrgServer
// for forward compatibility
type NewOrgServer interface {
	CreateMSP(context.Context, *Msp) (*Void, error)
	mustEmbedUnimplementedNewOrgServer()
}

// UnimplementedNewOrgServer must be embedded to have forward compatible implementations.
type UnimplementedNewOrgServer struct {
}

func (UnimplementedNewOrgServer) CreateMSP(context.Context, *Msp) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMSP not implemented")
}
func (UnimplementedNewOrgServer) mustEmbedUnimplementedNewOrgServer() {}

// UnsafeNewOrgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewOrgServer will
// result in compilation errors.
type UnsafeNewOrgServer interface {
	mustEmbedUnimplementedNewOrgServer()
}

func RegisterNewOrgServer(s *grpc.Server, srv NewOrgServer) {
	s.RegisterService(&_NewOrg_serviceDesc, srv)
}

func _NewOrg_CreateMSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewOrgServer).CreateMSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.NewOrg/CreateMSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewOrgServer).CreateMSP(ctx, req.(*Msp))
	}
	return interceptor(ctx, in, info, handler)
}

var _NewOrg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.NewOrg",
	HandlerType: (*NewOrgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMSP",
			Handler:    _NewOrg_CreateMSP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "newOrg.proto",
}
